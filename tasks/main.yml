---
# tasks file for harbor-rpm
- name: Activate SCL if on CentOS
  yum:
    name: centos-release-scl-rh.noarch
    state: installed
  when: ansible_distribution == 'CentOS'

- name: install repository PostgreSQL for RHEL/CentOS $releasever - $basearch
  yum:
    name: https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm
    state: present


- name: Install dependencies
  yum: name={{ item }} state=present
  with_items:
    - rh-redis5
    - rh-nginx114-nginx
    - postgresql10
    - postgresql10-server
    - python2-psycopg2


- name: Install Harbor-RPM repository
  get_url:
    url: https://copr.fedorainfracloud.org/coprs/mrmeee/harbor/repo/epel-7/mrmeee-harbor-epel-7.repo
    dest: /etc/yum.repos.d/mrmeee-harbor-epel-7.repo


- name: Check if postgreSQL has been initialized
  find:
    paths: /var/lib/pgsql/10/data/
    file_type: directory
    patterns: "*"
  register: dir_files

- name: Init postgreSQL
  command: /usr/pgsql-10/bin/postgresql-10-setup initdb
  when: dir_files.matched|int == 0

- name: Start and enable postgresql and redis
  service:
    name: "{{ item }}"
    state: started
    enabled: yes
  with_items:
    - postgresql-10
    - rh-redis5-redis

- name: Install Harbor RPM
  yum:
    name: harbor
    state: installed

- name: Create postgresql user with name "server"
  postgresql_user:
    name: server
    password: password
  become: yes
  become_user: postgres

- name: Create a new database with name "notaryserver"
  postgresql_db:
    name: notaryserver
    owner: server
  become: yes
  become_user: postgres

- name: Create postgresql user with name "signer"
  postgresql_user:
    name: signer
    password: password
  become: yes
  become_user: postgres

- name: Create a new database with name "notarysigner"
  postgresql_db:
    name: notarysigner
    owner: signer
  become: yes
  become_user: postgres

- name: Create postgresql user with name "signer"
  postgresql_user:
    name: signer
    password: password
  become: yes
  become_user: postgres

- name: Create a new database with name "registry"
  postgresql_db:
    name: registry
  become: yes
  become_user: postgres

- name: Create table with name "schema_migrations"
  postgresql_table:
    name: schema_migrations
    db: registry
    columns:
    - version bigint not null primary key
    - dirty boolean not null
    - stories text
  become: yes
  become_user: postgres

- name: Create postgresql user with name "harbor"
  postgresql_user:
    name: harbor
    password: "{{ harbor_database_password }}"
  become: yes
  become_user: postgres

- name: Create a new database with name "harbor"
  postgresql_db:
    name: harbor
    owner: harbor
  become: yes
  become_user: postgres

- name: Create postgresql user with name "clair"
  postgresql_user:
    name: clair
    password: "{{ clair_database_password }}"
  become: yes
  become_user: postgres

- name: Create a new database with name "clair"
  postgresql_db:
    name: clair
    owner: clair
  become: yes
  become_user: postgres

- name: Change postgreSQL auth to md5
  replace:
    path: /var/lib/pgsql/10/data/pg_hba.conf
    regexp: "ident"
    replace: "md5"

- name: Start postgresql
  service:
    name: postgresql-10
    state: restarted

- name: Create certificates and setup passwords
  command: scl enable rh-python36 "python3 /opt/harbor/setup/app/config-rpm.py"

- name: Set database passwords in core configuration
  replace:
    path: /etc/harbor/core/env
    regexp: "{{ item.search }}"
    replace: "{{ item.replace }}"
  with_items:
    - { search: '^POSTGRESQL_PASSWORD=.*$', replace: 'POSTGRESQL_PASSWORD={{ harbor_database_password }}'}
    - { search: '^CLAIR_DB_PASSWORD=.*$', replace: 'CLAIR_DB_PASSWORD={{ clair_database_password }}'}
    - { search: '^HARBOR_ADMIN_PASSWORD=.*$', replace: 'HARBOR_ADMIN_PASSWORD={{ harbor_admin_password }}'}
    - { search: '^EXT_ENDPOINT=.*$', replace: 'EXT_ENDPOINT={{ harbor_url }}'}

- name: Set database passwords in clair configuration
  replace:
    path: /etc/harbor/clair/config.yaml
    regexp: "{{ item.search }}"
    replace: "{{ item.replace }}"
  with_items:
    - { search: 'source: postgresql://clair:.*$', replace: 'source: postgresql://clair:{{ clair_database_password }}@localhost:5432/clair?sslmode=disable'}

- name: Set Chartserver configuration
  replace:
    path: /etc/harbor/chartserver/env
    regexp: "{{ item.search }}"
    replace: "{{ item.replace }}"
  with_items:
    - { search: 'CHART_URL=.*$', replace: 'CHART_URL={{ harbor_url }}/chartrepo'}

- name: Set registry configuration
  replace:
    path: /etc/harbor/registry/config.yml
    regexp: "{{ item.search }}"
    replace: "{{ item.replace }}"
  with_items:
    - { search: 'realm:.*$', replace: 'realm: {{ harbor_url }}/service/token'}

- name: Set SELinux Booleans
  seboolean:
    name: "{{ item }}"
    state: yes
    persistent: yes
  with_items:
    - "httpd_can_network_connect"
    - "httpd_can_network_relay"

- name: Disable Firewalld
  service:
    name: firewalld
    state: stopped
    enabled: no

- name: Copy nginx configuration
  copy:
    src: /opt/harbor/setup/ansible/files/nginx.conf
    dest: /etc/opt/rh/rh-nginx114/nginx/nginx.conf
    remote_src: yes

- name: Start nginx
  service:
    name: rh-nginx114-nginx
    state: started
    enabled: yes

- name: Start Harbor
  service:
    name: harbor
    state: started
    enabled: yes
